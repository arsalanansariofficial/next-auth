generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Token {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  expires DateTime
  email   String   @unique

  user User @relation(fields: [email], references: [email])
}

model Permission {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  roleIDs String[] @db.ObjectId

  roles Role[] @relation(fields: [roleIDs], references: [id])
}

model Role {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  userIDs       String[] @db.ObjectId
  permissionIDs String[] @db.ObjectId

  users       User[]       @relation(fields: [userIDs], references: [id])
  permissions Permission[] @relation(fields: [permissionIDs], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  password      String?
  emailVerified DateTime?
  email         String?   @unique
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
  hasOAuth      Boolean   @default(false)

  roleIDs    String[] @db.ObjectId
  accountIDs String[] @db.ObjectId

  token    Token?
  accounts Account[]
  roles    Role[]    @relation(fields: [roleIDs], references: [id])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  expires_at        Int?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  updatedAt         DateTime @updatedAt
  userId            String   @db.ObjectId
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
