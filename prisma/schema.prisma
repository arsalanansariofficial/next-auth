generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Day {
  SUNDAY
  MONDAY
  FRIDAY
  TUESDAY
  THURSDAY
  SATURDAY
  WEDNESDAY
}

model UserRole {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  roleId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model UserSpeciality {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId       String @db.ObjectId
  specialityId String @db.ObjectId

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  speciality Speciality @relation(fields: [specialityId], references: [id], onDelete: Cascade)
}

model RolePermission {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  roleId       String @db.ObjectId
  permissionId String @db.ObjectId

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

model Speciality {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  userSpecialities UserSpeciality[]
}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  rolePermission RolePermission[]
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  UserRole        UserRole[]
  RolePermissions RolePermission[]
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  expires   DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  userId String @unique @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TimeSlot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  duration  Int
  time      String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  userId String? @db.ObjectId

  User        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Appointment Appointment[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  expires_at        Int?
  type              String
  refresh_token     String?
  access_token      String?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  provider          String   @unique
  providerAccountId String   @unique
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  experience    Int?
  name          String?
  image         String?
  password      String?
  city          String?
  phone         String?
  gender        String?
  emailVerified DateTime?
  email         String?   @unique
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
  hasOAuth      Boolean   @default(false)

  daysOfVisit      Day[]
  token            Token?
  accounts         Account[]
  timings          TimeSlot[]
  UserRoles        UserRole[]
  UserSpecialities UserSpeciality[]

  doctorAppointments  Appointment[] @relation("doctor")
  patientAppointments Appointment[] @relation("patient")
}

model Appointment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  city      String
  notes     String?
  date      DateTime
  updatedAt DateTime          @updatedAt
  createdAt DateTime          @default(now())
  status    AppointmentStatus @default(PENDING)

  patientId  String @db.ObjectId
  doctorId   String @db.ObjectId
  timeSlotId String @db.ObjectId

  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  doctor   User     @relation("doctor", fields: [doctorId], references: [id], onDelete: Cascade)
  patient  User     @relation("patient", fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, doctorId, date, timeSlotId])
}
